

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head><title>
	红领巾社区
</title><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--开启响应式布局-->
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->
    <meta name="description" /><meta name="author" /><link rel="icon" href="/images/logo.jpg" /><link href="/js/bootstrap/css/bootstrap.css" rel="stylesheet" />
    <script src="/js/jquery.min.js"></script>
    <script src="/js/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="/js/common.js"></script>
    <style>
        /*
        * Style tweaks
        * --------------------------------------------------
        */
        html,
        body {
            overflow-x: hidden; /* Prevent scroll on narrow devices */
            /*font-family: KaiTi;*/
        }

        body {
            padding-top: 70px;
        }

        footer {
            padding: 30px 0;
        }
    </style>
    <script type="text/javascript">
        function modaldemo() {
            $("#modal-demo").modal("show");
        }
        //向服务器请求当前登录状态，然后切换登录区域的显示
        var checkLogin = function () {
            $.post("/ajax/CheckLogin.ashx", function (data) {
                var strs = data.split("|");
                if (strs[0] == "no") {
                    //alert("木有登陆");
                    $("#divLoginArea").show();
                    $("#divLoginOutArea").hide();
                }
                else {
                    //切换“登录”、“注销”的两个层
                    $("#divLoginArea").hide();
                    $("#divLoginOutArea").show();
                    $("#spanUserName").text(strs[1]);//把当前登录用户名显示出来
                }
            });
        }

        var loginFinish = function (data) {
            if (data == "ok") {
                //alert("成功");
                $("#divLogin").dialog("close"); //登录成功关闭窗口
                checkLogin();//登录成功，刷新登录区域的显示
            }
            else {
                alert("用户名密码错误");
            }
        };
        $(function () {
            $("#btnLogin").click(function () {
                //todo:检验用户名、密码不能为空
                var username = $("#txtUserName").val();
                var password = $("#txtPwd").val();
                $.post("/ajax/UserLogin.ashx",
                    { "username": username, "password": password },
                    function (data) {
                        if (data == "ok") {
                            $("#modal-demo").modal("hide");
                            checkLogin();//登录成功，刷新登录区域的显示
                        }
                        else {
                            alert("用户名密码错误");
                        }
                    });
            });
        });

        $(function () {
            checkLogin();//刚进入页面的时候也是先向服务器查询当前登录状态
            $("#btnLogout").click(function () {
                $.post("/ajax/Logout.ashx", function () {
                    checkLogin();//刷新显示
                });
            });
        });

        $(function () {
            //绑定菜单列表
            $.post("/ajax/GetChannel.ashx", { "action": "parent" }, function (data) {
                var chas = $.parseJSON(data);
                for (var i = 0; i < chas.length; i++) {
                    var cha = chas[i];
                    $('<li><a href="/Art/ViewChannel.aspx?id=' + cha.Id + '">' + cha.Name + '</a></li>').appendTo("#header-menu");
                }
            })
        })
    </script>
    
    
    
    
    <script src="/js/common.js"></script>
    <script type="text/javascript">
        //提交评论完成后的处理
        var postFinish = function (data) {
            //var oEditor = CKEDITOR.instances.txtComment;
            if (data == "ok") {
                //把评论的内容添加到界面上
                $("<li>"+$("#txtComment").val()+"</li>").appendTo("#ulComments");
                //$("<li>" + oEditor.getData() + "</li>").appendTo("#ulComments");


            }
            else if (data == "mod") {
                alert("等待审核");
            }
            else if (data == "banned") {
                alert("您的评论内容含有禁用词汇，请注意文明用语！");
            }
            else {
                alert("服务器返回错误:" + data);
            }
            //清空CKEditor
            //oEditor.setData("");//设置txtComment的内容也不能影响CKEditor
            $("#txtComment").val("");//评论提交成功后清除文本框
        };
        $(function () {
            //启动的时候通过ajax加载评论
            $.post("/ajax/GetComments.ashx", { "articleId": "73" },
            function (data) {
                var comments = $.parseJSON(data);//和eval一样是把json字符串转换为对象
                for (var i = 0; i < comments.length; i++) {
                    //把每条评论添加到ulComments上
                    var comment = comments[i];
                    $("<li>" + ubbToHtml(comment.Msg) + "</li>").appendTo("#ulComments");
                }
            });
            //todo:做静态页的时候思考为什么通过ajax加载评论，为什么有的网站在另外一个页面显示评论
            $("#btnPostComment").click(function () {
                var msg = $("#txtComment").val();
                //判断是否为空
                if (msg == null || msg == "" || msg == undefined) {
                    alert("请输入评论内容");
                    return;
                }
                //CKEditor是把原先的textarea替换（replace）调，然后画自己的内容，所以读取textarea的value并不能得到CKEditor当前编辑的内容
                //var oEditor = CKEDITOR.instances.txtComment;
                //var msg = oEditor.getData();
                //通过ajax提交评论
                $.post("/ajax/PostComment.ashx",
                    { "articleId": "73", "msg": msg },
                    postFinish);
            });
        });

        //    $(function () {
        //        CKEDITOR.replace('txtComment',
        //{
        //    extraPlugins: 'bbcode',
        //    removePlugins: 'bidi,button,dialogadvtab,div,filebrowser,flash,format,forms,horizontalrule,iframe,indent,justify,liststyle,pagebreak,showborders,stylescombo,table,tabletools,templates',
        //    toolbar:
        //    [
        //        ['Source', '-', 'Save', 'NewPage', '-', 'Undo', 'Redo'],
        //        ['Find', 'Replace', '-', 'SelectAll', 'RemoveFormat'],
        //        ['Link', 'Unlink', 'Image'],
        //        '/',
        //        ['FontSize', 'Bold', 'Italic', 'Underline'],
        //        ['NumberedList', 'BulletedList', '-', 'Blockquote'],
        //        ['TextColor', '-', 'Smiley', 'SpecialChar', '-', 'Maximize']
        //    ],
        //    smiley_images:
        //    [
        //        'regular_smile.gif', 'sad_smile.gif', 'wink_smile.gif', 'teeth_smile.gif', 'tounge_smile.gif',
        //        'embaressed_smile.gif', 'omg_smile.gif', 'whatchutalkingabout_smile.gif', 'angel_smile.gif', 'shades_smile.gif',
        //        'cry_smile.gif', 'kiss.gif'
        //    ],
        //    smiley_descriptions:
        //    [
        //        'smiley', 'sad', 'wink', 'laugh', 'cheeky', 'blush', 'surprise',
        //        'indecision', 'angel', 'cool', 'crying', 'kiss'
        //    ]
        //});
        //    });
    </script>
    <script type="text/javascript">
        var rateFinish = function (data) {
            if (data == "duplicate") {
                alert("同一段视频24小时之内只能打分一次");
            }
            else {
                alert("打分成功");
            }
        }
        var imgStyle = function () {
            $("img").addClass("img-responsive");
        }

        $(function () {
            imgStyle();
            $("#btnDing").button({
                icons: { primary: 'ui-icon-check' }
            }).click(function () {
                $.post("/ajax/RateArticle.ashx",
                { "articleId": "73", "action": 1 }, rateFinish);
            });
            $("#btnCai").button({
                icons: { primary: 'ui-icon-closethick' }
            }).click(function () {
                $.post("/ajax/RateArticle.ashx",
                { "articleId": "73", "action": -1 }, rateFinish);
            });
        });
    </script>
</head>
<body>
    <nav class="navbar navbar-fixed-top navbar-inverse">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/Index.aspx">红领巾社区</a>
            </div>
            <div id="navbar" class="collapse navbar-collapse">
                <ul class="nav navbar-nav" id="header-menu">
                    <li class="active"><a href="/Index.aspx">首页</a></li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li id="divLoginArea">
                        <a href="javascript:;" onclick="modaldemo()">登录</a>
                    </li>
                    <li id="divLoginOutArea" class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">欢迎您，<span id="spanUserName"></span><span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="/FindPassword.aspx">修改密码</a></li>
                            <li><a href="javascript:;" id="btnLogout">注销</a></li>
                        </ul>
                    </li>
                </ul>

            </div>

            <!-- /.nav-collapse -->
        </div>
        <!-- /.container -->
    </nav>
    <!-- /.navbar -->
    <div class="container">
        <form method="post" action="./ViewArticle.aspx?id=73" id="form1">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTIwNzQ0MjkzMjhkZNbbeL38Ox0VsgdXW+ie5WCZQJ22fxZlT9COXWbfTw20" />

            
    <div class="row">
        <div class="col-lg-12">
            <h4 class="text-primary">
                C#高级笔记<br />
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <p>
	1.页面缓存<br />
	基于URL的参数缓存<br />
	&lt;%OutputCache&nbsp; Duration=&quot;10&quot;&nbsp; VaryByParam=&quot;none&quot;%&gt;<br />
	//设置失效时间，参数为id的话，会根据id产生相同页面不同id的缓存<br />
	可以设置*，<br />
	2.基于数据源的缓存<br />
	ods CacheDuration EnableCaching=true<br />
	3.自定义缓存（全局的）<br />
	HttpRuntime.<br />
	Cache[&quot;name&quot;] = value;</p>
<p>
	monitor 加锁解锁 &nbsp;<br />
	lock<br />
	<br />
	线程执行带参数的方法<br />
	PraameterizedThreadStart 带参数的<br />
	<br />
	ParameterizedThreadStart pts = new ParameterizedthreadStart(AddTest)<br />
	Thread t = new Thread(pts);<br />
	t.Start();<br />
	Invoke<br />
	<br />
	标注[注解]：<br />
	Attribute属性（容易和类的属性Property混淆）、标记、特性、注解等。<br />
	Attribute用来对类、属性、方法等标注额外的信息，相当于贴一个标签。<br />
	DisplayName:<br />
	[Serializable]允许序列化<br />
	<br />
	反射：<br />
	目的，动态的调用方法，动态的使用对象。<br />
	GAC，全局程序集缓存。公用的Assembly放到GAC中。<br />
	Assembly类是对程序集的描述（*）<br />
	AppDomain.CurrentDomain.GetAssemblise();获取程序的所有程序集<br />
	<br />
	string fileName=@&quot;&quot;;<br />
	Assembly asm = Assembly.LoadFile(fileName);<br />
	Type[] types = asm.GetTypes();<br />
	foreach(Type type in types){<br />
	Console.WriteLine(Type);<br />
	PropertyInfo[] pros =type.GetProperties();<br />
	foreach(PropertyInfo prop in pros){<br />
	Console.WriteLine(prop);<br />
	}<br />
	}<br />
	Type类（*）：<br />
	Type类可以叫做&ldquo;类的类&rdquo;，一个类型对应一个Type类的对象，通过Type对象可以获得类的所有的定义信息，比如类都有哪些属性、哪些方法等。Type就是对类的描述<br />
	Type对象的方法，<br />
	typeof、GetType、GetExportedTypes（获得Assembly中定义的所有public类型）、GetTypes（获得Assembly中定义的所有internal类型）、GetType（Name）获得定义全名为name的类型信息。<br />
	//没有对象的时候通多类来获得类的描述<br />
	Type t1 = typeof(Dog);<br />
	object d1 = new Dog();<br />
	//.GetType()获得对象的类型的类型描述<br />
	Type t2 = d1.GetType();<br />
	Console.WriteLine(t2);<br />
	Type类的方法：<br />
	Activator.CreateInstance(Type t)会动态调用类的public无参构造函数创建一个对象，返回值就是创建的对象，如果类没有无参构造函数就会报错。<br />
	IsAssignableFrom（Type c）判断当前的类型变量是不是可以接受C类型变量的赋值。<br />
	A.IsAssignableFrom(B)//A类型的变量是否能从B类型的变量赋值<br />
	IsInstanceOfType（object o）//判断对象o是否是当前类的实例<br />
	IsSubclassOf//只适用于类，判断A是B的子类<br />
	<br />
	反射调用成员：程序练习<br />
	利用反射可以调用私有的方法。<br />
	Person p = new Person();<br />
	Type type=p.GetType();<br />
	MethodInfo method = type.GetMethod(&quot;SayHello&quot;,BindingFlags.NonPublic);<br />
	method.Invoke(p,null);<br />
	反射案例-编辑器插件<br />
	//Plugin：插件. Addin：插件。<br />
	可以把文本全部大写、全部小写，动态扩展的编辑器工具<br />
	作业：1.日志框架 2.XML序列化器：把一个对象写成XML节点格式<br />
	<br />
	泛型：<br />
	ArrayList<br />
	List<br />
	自己写泛型类：<br />
	public class DataContainer &lt;T&gt;<br />
	{<br />
	public T Data{get;set;}<br />
	}<br />
	public class MyKeyValue&lt;Tkey,Tvalue&gt;<br />
	{<br />
	public Tkey Key{get;set;}<br />
	public Tvalue Value{get;set;}<br />
	}<br />
	自己写泛型方法：<br />
	static T1 Hello&lt;T1,T2&gt;(T1 t1,T2 t2){}<br />
	泛型委托：<br />
	delegate void MyDelegate&lt;T1,T2&gt;(T1 t1, T2 t2);<br />
	MyDelegate&lt;string,int&gt; md=Hello;<br />
	static void Hello(string ,int){}<br />
	.net内置了一个Func委托<br />
	Func&lt;int&gt; f =Hello;<br />
	static int Hello(){return 0;}<br />
	泛型的约束：<br />
	//约束T必须有无参的构造函数，约束对于泛型委托、泛型类都是一样的<br />
	static List&lt;T&gt; CreatList&lt;T&gt;(int n) where T:new(){}<br />
	泛型约束之继承：<br />
	class PersonList&lt;T&gt; where T:Person{<br />
	public void Dot(T t){}//约定了Person类，可以调用他的属性<br />
	}<br />
	class Person {}<br />
	class Chinese:Person{}<br />
	PersonList&lt;Chinese&gt; list = new PersonList&lt;Chinese&gt;();<br />
	int? 表示可空，编译器最终会翻译成Nullable&lt;int&gt;类型<br />
	LazyObject（微软的强大之处，很贴心）<br />
	对象什么时候用，什么时候被创建，不占内存。<br />
	Lazy&lt;Person&gt; person =new Lazy&lt;Person&gt;();<br />
	person.Value.Hello();//Lazy的Value用获得延迟创建对象<br />
	自己的Lazy：<br />
	class MyLazy&lt;T&gt; where T:new(){<br />
	private instance;<br />
	public T value(){<br />
	get{if(instance ==null){<br />
	instance =new T();}<br />
	return instance;}<br />
	&nbsp;&nbsp; &nbsp;} } }<br />
	<br />
	代码管理：<br />
	VSS：<br />
	<br />
	单例模式（解决多线程问题，没有并发）：<br />
	只有一个对象的类<br />
	1.建立私有的构造函数 private Earth（）{}<br />
	2.声明私有的静态成员 private static Earth instance =new Earth（）;<br />
	3.编写一个公共的静态方法，返回唯一的实例 public static Earth GetEarth(){return instance;};<br />
	<br />
	序列化和反序列化：<br />
	类前需要标注：【Serializable】对象的属性、字段的类型也必须序列化<br />
	BinaryFormatter bf = new BinaryFormatter();<br />
	using (Stream stream = File.OpenWrite(@&quot;C:\a.txt&quot;))<br />
	{<br />
	bf.Serialize(stream,list);//序列化，把集合序列化到流中。<br />
	}<br />
	BinaryFormatter bf = new BinaryFormatter();<br />
	using (Stream stream = File.OpenRead(@&quot;C:\a.txt&quot;))<br />
	{<br />
	var list = bf.DeSerialize(stream).Tolist();//反序列化<br />
	}<br />
	<br />
	文件流（高级）：<br />
	Flush、强制把缓冲区中的数据写入文件<br />
	Close、会把没有写入缓冲区的数据写入文件再关闭<br />
	Dispose、方法会调用close，所以以后 用Stream的时候用using最保险<br />
	File.OpenRead ;File.OpenWrite;简写，不用new了。<br />
	GZIPStream压缩流（类似装饰者模式）<br />
	MemoryStream内存流，支持指针的前进后退，Seek（）<br />
	StreamReader；StreamWriter；文本流<br />
	WebClient的流操作；<br />
	<br />
	文件流（核心）：<br />
	拷贝文件有两种方式：<br />
	1.将源文件内容全部读取到内存中，再写到目标文件中；一次性读写 dataset（处理小数据可以）<br />
	2.流的操作。读一点，写一点。像从一个缸里舀水到另一个缸里 sqldatareader<br />
	缓冲区 byte[] bytes = new bytes[1024*1024*5];<br />
	byte加密工具：<br />
	在缓冲区做处理：<br />
	byte.MaxValue-实际值；//byte的最大值减去实际值<br />
	进度条：progressbar设置它的value的最大值即可。<br />
	<br />
	IO：<br />
	文件编码：将字符串以什么样的形式保存为二进制。ANSI，Unicode，UTF-8，<br />
	File类的常用静态方法：<br />
	AppendAllText（string path，string contents），将文本contents附加到文件path中<br />
	Exist（string path）判断文件path是否存在<br />
	默认采用UTF8编码<br />
	ReadAllLines（string path）读取文本文件到字符串数组中<br />
	ReadAllText（string path）读取文本文件到字符串中<br />
	WriteAllText（string path，string contents）将文本contents保存到文件path中，会覆盖旧内容<br />
	WriteAllLines（string path，string[] contents）将字符串数组逐行保存到文件path中，会覆盖旧内容<br />
	Directory类的常用静态方法：<br />
	Delete，Exists，GetDirectories（反射会用到），GetFiles，CreateDirectory，<br />
	Path类的常用静态方法：<br />
	ChangeExtension，修改文件的后缀（仅仅是把文件名当成字符串来处理，不会对文件修改，也不管文件存不存在）<br />
	Combine，将两个路径合到一起<br />
	GetDirectoryName，得到文件的路径名<br />
	GetExtension，判断文件的后缀名<br />
	GetFullPath，得到文件的全路径。 .\当前路径, ..\上一级路径<br />
	得到当前exe所在的路径<br />
	Assembly.GetExecutingAssembly().Location；<br />
	<br />
	设计模式：<br />
	共有多少种设计模式？就一种，多态！<br />
	设计模式就是多态！！！<br />
	开闭原则：对变化开放，对修改关闭<br />
	多态：<br />
	interface接口<br />
	abstract抽象类<br />
	: ，virtual override继承<br />
	接口和抽象类在使用方面最主要的区别：接口提供公共的行为（能干什么），抽象类提供公共的实现（怎么干）。<br />
	例子:<br />
	设计模式：通过接口访问不同数据库&mdash;&mdash;配置提供者（SettingsProvider）：可通过配置选用不同数据库<br />
	ISettingProvider接口，TextSettingProvider类，SqlSettingProvider类，AccessSettingProvider类。<br />
	模板方法模式：给接口实现一层抽象类，把接口的方法实现，就像一层模板。<br />
	在ISettingProvider接口的基础上，实现BaseDbSettingProvider抽象类。<br />
	装饰者模式：在抽象类的基础上装饰一层加密，把数据进行装饰。<br />
	在BaseDbSettingProvider抽象类的基础上，实现DESSettingProvider类进行装饰。<br />
	<br />
	CTS（Common Type System）<br />
	CLR（Common Language Runtime）<br />
	<br />
	浅拷贝和深层拷贝：<br />
	浅层拷贝：就是只拷贝类的第一层成员，而且如果成员是引用类型，则引用同一份。<br />
	深层拷贝：把对象引用的所有直接、间接的对象都拷贝一份。完全的拷贝一份。<br />
	实现接口：ICloneable<br />
	public object Clone(){<br />
	//方法内容需要自己写<br />
	//若仅仅是浅层拷贝<br />
	this.MemberwiseClone();//返object类型,是protected方法<br />
	}<br />
	<br />
	指针：<br />
	1.项目允许不安全代码<br />
	2.方法或者代码块标记为unsafe<br />
	int i =5;<br />
	int* ip = &amp;i;<br />
	*ip=6;<br />
	Console.WriteLine(i);<br />
	<br />
	结构体（Struct）：<br />
	回忆之前的类型有：enum delegate class<br />
	结构体是值类型，拷贝一份<br />
	性能较高，与int bool 等类型的基类都是ValueType<br />
	<br />
	字符串拘留池（CLR：）<br />
	因为字符串是不可变的，所以CLR可能会将相同值的字符串用同一个实例。程序中大量使用字符串，有不少是重复性的，为了降低内存占用，.Net将代码中声明的字符串放到字符串拘留池中，值相同的字符串共享同一个实例。<br />
	如：<br />
	object.ReferenceEquals(s1,s2);//判断是否是同一个对象<br />
	string s1=&quot;abc&quot;;string s2=&quot;abc&quot;;string s2=&quot;a&quot;+&quot;bc&quot;;//编译器优化<br />
	object.ReferenceEquals(s1,s2);//判断为True，是同一个对象，这就是CLR的工作<br />
	<br />
	StringBuilder：<br />
	大量的字符串相连会产生大量的中间字符串，字符串是对象，对象的产生是满的，而且会占用大量的内存。<br />
	<br />
	IDisposable接口：<br />
	GC只能回收GC托管内存资源，对于数据库连接、文件句柄、Socket连接等资源就无能为力。<br />
	实现了IDisposable接口，在Dispose方法中进行回收。<br />
	如：<br />
	FileStream f s= new FileStream();<br />
	try{<br />
	fs.Read()}<br />
	finally{<br />
	fs.Dispose();}<br />
	using 会自动调用Dispose方法进行销毁。<br />
	<br />
	程序调优：<br />
	CLRProfiler（免费）微软自己的。<br />
	.Net.Memory.Profiler （付费）第三方。分析对象的创建、回收，内存泄露的原因。<br />
	WinDbg（*）成为牛人必备的工具。<br />
	<br />
	GC垃圾回收机制（Garbage Collection）：<br />
	没有引用了才有可能被回收，若正在引用着是绝对不能被回收的。<br />
	频繁的GC会造成系统性能下降，不是有了垃圾就清理。<br />
	GC就像清洁工，有了垃圾就去清扫，累死他了。<br />
	GC.Collect();强制立即回收<br />
	WeakReference 弱引用：监控<br />
	WeakReference&nbsp; wr = new WeakReference(p1);<br />
	wr.IsAlive//判断指向的对象还活着吗？<br />
	<br />
	程序集（C#）：<br />
	可以看做把一堆相关类打成一个包<br />
	目的：程序中只引用必须的程序集，减小程序的尺寸；一些程序集内部的类不想让其他程序集调用。<br />
	exe、dll都是程序集，只不过exe有入口而已，exe也可以被添加引用。dll不一定是程序集（VC写的dll就不是程序集），程序集不一定是dll<br />
	<br />
	*委托和事件的区别：<br />
	委托：指向函数的变量，无法把函数串起来，存在多个函数时，指向最后的函数<br />
	事件：<br />
	委托和事件没有可比性，因为委托是类型，事件是对象；事件的内部使用委托实现的，对于事件来讲，外部只能&ldquo;注册自己+=、注销自己-=&rdquo;，外界不可以注销其他的注册者，外界不可以主动触发事件，因此如果用Delegate就没法进行上面的控制，因此诞生了事件这种语法。（add、remove），事件是用来阉割委托实例的。事件只能add、remove自己，不能赋值。<br />
	<br />
	*匿名函数（多线程的时候常用）：<br />
	FilterDelegate fd = delegate(string s){ Console.WriteLine(&quot;{0表达式}&quot;,s)};<br />
	fd(&quot;lambda&quot;);<br />
	<br />
	*lambda表达式：<br />
	(参数列表)=&gt;{方法体 };<br />
	FilterDelegate fd = (s) =&gt;{ Console.WriteLine(&quot;{0表达式}&quot;,s)};<br />
	fd(&quot;lambda&quot;);<br />
	public delegate void FilterDelegate();<br />
	<br />
	SharePoint CMS MOSS(Microsoft Office SharePoint Server)<br />
	<br />
	扩展方法：<br />
	1.声明为静态类（static class）<br />
	2.在静态方法的第一个参数上加this（this string str）<br />
	结果 ，string str =&ldquo;abc&rdquo;； str.方法（）.方法（）.方法（）；<br />
	非扩展方法： 方法（方法（方法（方法（str））））<br />
	可根据返回类型继续点出扩展方法。<br />
	<br />
	linq（最后都会编译成委托）:<br />
	需引用 using System.linq;<br />
	IEnumerable静态类，里面包含.Where（i=&gt;i） .Select .Orderby 等等<br />
	<br />
	linq to sql（编译时会） :<br />
	var list = from i in values //foreach(int i in values) 遍历集合中的每个元素<br />
	where i &gt;10<br />
	orderby&nbsp; i descending<br />
	select &quot;[&quot;+i+&quot;}&quot;; //select 什么类型 返回就是什么类型 select new {}(匿名类型) //select new Person { Name=&quot;&quot;;Age=};<br />
	<br />
	var list = from str in values<br />
	let n =Convert.ToInt32(str)//声明临时变量n<br />
	where n&gt;100<br />
	select n;<br />
	foreach(int i in list){<br />
	Console.WriteLine(i);;<br />
	}<br />
	<br />
	//将Dictionary中年龄大于20的人的姓名用&ldquo;，&rdquo;分割打印出来<br />
	Dictionary &lt;string ,int &gt; dict =new Dictionary&lt;string,int&gt;();<br />
	dict[&quot;tom&quot;]=20;<br />
	dict[&quot;ainy&quot;]=30;<br />
	dict[&quot;bulusi&quot;]=120;<br />
	dict[&quot;tony&quot;]=2;<br />
	var list =from str in dict.Keys<br />
	where dict[str]&gt;20<br />
	select str;<br />
	Console.WriteLine(string.Join(&quot;,&quot;,list.ToArray()));<br />
	<br />
	//取出现次数最多的三个数<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] values = { 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 4, 5 };<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var result = from item in values<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; group item by item into g<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; orderby g.Count() descending<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select new { 数字 = g.Key, 次数 = g.Count() };<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var item in result.Take(3))<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(item.数字 + &quot;=&quot; + item.次数);<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
	<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.ReadKey();<br />
	<br />
	linq常用扩展：<br />
	下面的方法都是IEnumerable&lt;T&gt;的扩展方法：<br />
	Average计算平均值； Min最小元素；Max最大元素；Sum元素总和； Count元素数量；<br />
	Concat连接两个序列；//Unoin all<br />
	Contains序列是否包含指定元素；<br />
	Distinct取得序列中的非重复元素；<br />
	Except获得两个序列的差集；<br />
	Intersect获得两个序列的交集；<br />
	First取得序列第一个元素；<br />
	Single取得序列的唯一一个元素，如果元素个数不是1个，则报错；！！！严谨的程序。<br />
	FirstOrDefault 取得序列第一个元素，如果没有一个元素，则返回默认值；<br />
	Linq只能用于泛型的序列，IEnumerable&lt;T&gt;，对于非范型，可以用Cast或者OfType<br />
	IEnumerable的方法：<br />
	Cast&lt;TResult&gt;：由于Linq要针对范型类型操作，对于老版本.Net类等非范型的IEnumerable序列可以用Cast方法转换为范型的序列。ArrayList l; IEnumerable&lt;int&gt; il = l.Cast&lt;int&gt;();<br />
	OfType&lt;TResult&gt;：Cast会尝试将序列中所有元素都转换为TResult类型，如果待转换的非范型序列中含有其他类型，则会报错。OfType则是只将序列中挑出指定类型的元素转换到范型序列中。<br />
	Linq的效率怎么样（小数据量、对性能要求不高的环节用linq很方便，而且延迟加载机制降低了内存占用，比一般人写的程序效率都高）<br />
	<br />
	Cast用来将非泛型的集合转换成泛型的集合<br />
	如：<br />
	object[] values ={12,23,3,2,3,4,43,};<br />
	Console.WriteLine(values.Cast&lt;int&gt;.Mix());<br />
	OfType仅仅把指定类型的元素转成泛型集合<br />
	object[] values ={12,23,3,2,3,4,43,&quot;我是米老鼠&quot;};<br />
	Console.WriteLine(values.OfType&lt;int&gt;.Mix());</p>

        </div>
    </div>
    <div class="row">
        <div class="col-lg-10">
            <strong>发表时间：2018/10/24 11:42:26
            </strong>
        </div>
        <div class="col-lg-2">
            <a class="btn btn-default" id="btnDing"><span class="glyphicon glyphicon-thumbs-up"></span>推荐</a>
            <a class="btn btn-default" id="btnCai"><span class="glyphicon glyphicon-thumbs-down "></span>反对</a>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-lg-12">
            <h4>评论列表</h4>
            <div class="">
                <ol id="ulComments">
                </ol>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <textarea class="form-control" placeholder="说两句吧..." id="txtComment"></textarea><br />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-1 col-lg-offset-11">
            <input type="button" class="btn btn-default" value="评论" id="btnPostComment" />
        </div>
    </div>

        
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="E1B165C8" /></form>
        
        
        <hr />
        <footer>
            <p>&copy; 本站所有信息均采集于互联网,如有侵权请联系：qctvip@vip.163.com</p>
            <div class="hidden">
            <script src="https://s19.cnzz.com/z_stat.php?id=1275095046&web_id=1275095046" type="text/javascript"></script>
            </div>
        </footer>
    </div>
    <!--登录对话框-->
    <div id="modal-demo" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content radius">
                <div class="modal-header">
                    <h3 class="modal-title">用户登录</h3>
                    <a class="close" data-dismiss="modal" aria-hidden="true" href="javascript:void();">×</a>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label for="txtUserName" class="col-sm-2 col-md-5 control-label">用户名</label>
                            <div class="col-sm-3">
                                <input type="email" class="form-control" id="txtUserName" placeholder="用户名" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="txtPwd" class="col-sm-2 col-md-5 control-label">密码</label>
                            <div class="col-sm-3">
                                <input type="password" class="form-control" id="txtPwd" placeholder="密码" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10 col-md-offset-5">
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" />
                                        记住密码
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <div class="text-left">
                        <a href="/RegUser.aspx">注册</a>
                        <a href="/FindPassword.aspx">忘记密码?</a>
                    </div>
                    <button class="btn btn-primary" id="btnLogin">确定</button>
                    <button class="btn" data-dismiss="modal" aria-hidden="true">关闭</button>
                </div>
            </div>
        </div>
    </div>

<!-- Visual Studio Browser Link -->
<script type="application/json" id="__browserLink_initializationData">
    {"appName":"Unknown","requestId":"c1ac17ad94704ce4a675a41c78a8c5c5"}
</script>
<script type="text/javascript" src="http://localhost:3285/f03e4909866e4711a8dd495b7f39e2ba/browserLink" async="async"></script>
<!-- End Browser Link -->

</body>
</html>
